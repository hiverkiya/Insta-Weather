{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\weatherapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      pressure: undefined,\n      Maxtemp: undefined,\n      Mintemp: undefined,\n      weather: undefined,\n      humidity: undefined,\n      wind: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      icon: undefined,\n      loading: true,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value; //getElementById(\"comments\").style.display = 'default';\n\n      console.log(city);\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      console.log(response);\n      const myJson = await response.json();\n      console.log(myJson);\n      const date1 = new Date(myJson.sys.sunrise * 1000);\n      const hours1 = date1.getHours(); // Minutes part from the timestamp\n\n      const minutes1 = \"0\" + date1.getMinutes(); // Seconds part from the timestamp\n\n      const seconds1 = \"0\" + date1.getSeconds(); // Will display time in 10:30:23 format\n\n      const formattedTime1 = hours1 + ':' + minutes1.substr(-2) + ':' + seconds1.substr(-2);\n      console.log(formattedTime1);\n      const date2 = new Date(myJson.sys.sunset * 1000);\n      const hours2 = date2.getHours(); // Minutes part from the timestamp\n\n      const minutes2 = \"0\" + date2.getMinutes(); // Seconds part from the timestamp\n\n      const seconds2 = \"0\" + date2.getSeconds(); // Will display time in 10:30:23 format\n\n      const formattedTime2 = hours2 + ':' + minutes2.substr(-2) + ':' + seconds2.substr(-2);\n      console.log(formattedTime2);\n      this.setState({\n        temperature: myJson.main.temp,\n        humidity: myJson.main.humidity,\n        Maxtemp: myJson.main.temp_max,\n        Mintemp: myJson.main.temp.min,\n        pressure: myJson.main.pressure,\n        weather: myJson.weather[0].main,\n        wind: myJson.wind.speed,\n        sunrise: formattedTime1,\n        sunset: formattedTime2,\n        loading: false,\n        icon: myJson.weather[0].icon,\n        error: \"\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Weather App\"), React.createElement(Form, {\n      getWeather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"information\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Weather, {\n      temperature: this.state.temperature,\n      icon: this.state.icon,\n      weather: this.state.weather,\n      wind: this.state.wind,\n      humidity: this.state.humidity,\n      pressure: this.state.pressure,\n      Maxtemp: this.state.Maxtemp,\n      Mintemp: this.state.Mintemp,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/weatherapp/src/App.js"],"names":["React","Component","Form","Comment","Weather","API_KEY","App","state","temperature","undefined","pressure","Maxtemp","Mintemp","weather","humidity","wind","sunrise","sunset","icon","loading","error","getWeather","e","preventDefault","city","target","elements","value","console","log","response","fetch","myJson","json","date1","Date","sys","hours1","getHours","minutes1","getMinutes","seconds1","getSeconds","formattedTime1","substr","date2","hours2","minutes2","seconds2","formattedTime2","setState","main","temp","temp_max","min","speed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\n\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\nstate = {\n  temperature : undefined,\n  pressure: undefined,\n Maxtemp:undefined,\n Mintemp: undefined,\n weather: undefined,\n  humidity: undefined,\n  wind: undefined,\n  sunrise: undefined,\n  sunset: undefined,\n  icon: undefined,\n  loading: true,\n  error: undefined\n}\ngetWeather = async(e)=>{\n  e.preventDefault();\nconst city = e.target.elements.city.value;\n  //getElementById(\"comments\").style.display = 'default';\nconsole.log(city)\nconst response=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\nconsole.log(response);\nconst myJson=await response.json();\nconsole.log(myJson);\nconst date1 = new Date(myJson.sys.sunrise *1000);\nconst hours1 = date1.getHours();\n// Minutes part from the timestamp\nconst minutes1 = \"0\" + date1.getMinutes();\n// Seconds part from the timestamp\nconst seconds1 = \"0\" + date1.getSeconds();\n\n// Will display time in 10:30:23 format\nconst formattedTime1 = hours1 + ':' + minutes1.substr(-2) + ':' + seconds1.substr(-2);\nconsole.log(formattedTime1);\n\nconst date2 = new Date(myJson.sys.sunset *1000);\nconst hours2 = date2.getHours();\n// Minutes part from the timestamp\nconst minutes2 = \"0\" + date2.getMinutes();\n// Seconds part from the timestamp\nconst seconds2 = \"0\" + date2.getSeconds();\n\n// Will display time in 10:30:23 format\nconst formattedTime2 = hours2 + ':' + minutes2.substr(-2) + ':' + seconds2.substr(-2);\nconsole.log(formattedTime2);\nthis.setState({\n  temperature: myJson.main.temp,\n  humidity: myJson.main.humidity,\n  Maxtemp: myJson.main.temp_max,\n  Mintemp: myJson.main.temp.min,\n  pressure: myJson.main.pressure,\n  weather: myJson.weather[0].main,\n  wind: myJson.wind.speed,\n  sunrise: formattedTime1,\n  sunset: formattedTime2,\n  loading: false,\n  icon: myJson.weather[0].icon,\n   error: \"\"\n});\n}\n\n\n  render() {\n    return (\n      <div><h3>\n      Weather App\n      </h3>\n    <Form getWeather={this.getWeather}/>\n<div id=\"information\">\n  <Weather\n\n  temperature = {this.state.temperature}\n  icon = {this.state.icon}\n  weather = {this.state.weather}\n  wind = {this.state.wind}\n  humidity = {this.state.humidity}\n  pressure = {this.state.pressure}\n  Maxtemp = {this.state.Maxtemp}\n  Mintemp = {this.state.Mintemp}\n  sunrise = {this.state.sunrise}\n  sunset = {this.state.sunset}\n  error = {this.state.error}\n  />\n</div>\n   <br/><br/>\n   <div id = \"comments\">\n <Comment color='red' />\n </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}