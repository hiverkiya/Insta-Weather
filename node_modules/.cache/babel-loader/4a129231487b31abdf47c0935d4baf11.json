{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\weatherapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cityname: undefined,\n      country: undefined,\n      temperature: undefined,\n      pressure: undefined,\n      Maxtemp: undefined,\n      Mintemp: undefined,\n      weather: undefined,\n      humidity: undefined,\n      wind: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      icon: undefined,\n      time: undefined,\n      loading: false,\n      check: false,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      this.state.check = true;\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      console.log(city);\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      console.log(response);\n      const myJson = await response.json();\n      console.log(myJson);\n\n      if (city) {\n        //sunrise format\n        const date1 = new Date(myJson.sys.sunrise * 1000);\n        const hours1 = date1.getHours();\n        const minutes1 = \"0\" + date1.getMinutes();\n        const seconds1 = \"0\" + date1.getSeconds(); //time for sunrisse\n\n        const formattedTime1 = hours1 + ':' + minutes1.substr(-2) + ':' + seconds1.substr(-2); //sunset format\n\n        const date2 = new Date(myJson.sys.sunset * 1000);\n        const hours2 = date2.getHours();\n        const minutes2 = \"0\" + date2.getMinutes();\n        const seconds2 = \"0\" + date2.getSeconds(); //time for sunset\n\n        const formattedTime2 = hours2 + ':' + minutes2.substr(-2) + ':' + seconds2.substr(-2); //to display time,day and time\n\n        const date = new Date();\n        const year = date.getFullYear();\n        const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n        const month = months[date.getMonth()];\n        const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n        const day = days[date.getDay()];\n        const num = date.getDate();\n        const string = day + \" \" + month + \" \" + num + \" \" + year;\n        console.log(string);\n        this.setState({\n          cityname: myJson.name,\n          country: myJson.sys.country,\n          temperature: myJson.main.temp,\n          humidity: myJson.main.humidity,\n          Maxtemp: myJson.main.temp_max,\n          Mintemp: myJson.main.temp.min,\n          pressure: myJson.main.pressure,\n          weather: myJson.weather[0].main,\n          wind: myJson.wind.speed,\n          sunrise: formattedTime1,\n          sunset: formattedTime2,\n          icon: myJson.weather[0].icon,\n          loading: false,\n          time: string,\n          error: \"\"\n        });\n      } else {\n        this.setState({\n          cityname: undefined,\n          country: undefined,\n          temperature: undefined,\n          pressure: undefined,\n          Maxtemp: undefined,\n          Mintemp: undefined,\n          weather: undefined,\n          humidity: undefined,\n          wind: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          icon: undefined,\n          time: undefined,\n          loading: false,\n          error: \"Please enter the values.\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Weather App\"), React.createElement(Form, {\n      getWeather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), this.state.loading && this.state.check ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \"Loading....\") : React.createElement(\"div\", {\n      id: \"information\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(Weather, {\n      cityname: this.state.cityname,\n      country: this.state.country,\n      time: this.state.time,\n      temperature: this.state.temperature,\n      icon: this.state.icon,\n      weather: this.state.weather,\n      wind: this.state.wind,\n      humidity: this.state.humidity,\n      pressure: this.state.pressure,\n      Maxtemp: this.state.Maxtemp,\n      Mintemp: this.state.Mintemp,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/weatherapp/src/App.js"],"names":["React","Component","Form","Comment","Weather","API_KEY","App","state","cityname","undefined","country","temperature","pressure","Maxtemp","Mintemp","weather","humidity","wind","sunrise","sunset","icon","time","loading","check","error","getWeather","e","preventDefault","city","target","elements","value","console","log","response","fetch","myJson","json","date1","Date","sys","hours1","getHours","minutes1","getMinutes","seconds1","getSeconds","formattedTime1","substr","date2","hours2","minutes2","seconds2","formattedTime2","date","year","getFullYear","months","month","getMonth","days","day","getDay","num","getDate","string","setState","name","main","temp","temp_max","min","speed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\n\n\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\nstate = {\n  cityname: undefined,\n  country :undefined,\n  temperature : undefined,\n  pressure: undefined,\n Maxtemp:undefined,\n Mintemp: undefined,\n weather: undefined,\n  humidity: undefined,\n  wind: undefined,\n  sunrise: undefined,\n  sunset: undefined,\n  icon: undefined,\n  time: undefined,\n  loading: false,\n  check:false,\n  error: undefined\n}\n// constructor()\n// {\n//   super();\n  \n// }\n\n// setTimeout(getWeather = async(e) => {\n//   e.preventDefault();\n// const city = e.target.elements.city.value;\n \n// console.log(city)\n// const response=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n// console.log(response);\n// const myJson=await response.json();\n// console.log(myJson);\n\n// if(city)\n// {\n//   //sunrise format\n// const date1 = new Date(myJson.sys.sunrise *1000);\n// const hours1 = date1.getHours();\n// const minutes1 = \"0\" + date1.getMinutes();\n// const seconds1 = \"0\" + date1.getSeconds();\n// //time for sunrisse\n// const formattedTime1 = hours1 + ':' + minutes1.substr(-2) + ':' + seconds1.substr(-2);\n\n//  //sunset format\n// const date2 = new Date(myJson.sys.sunset *1000);\n// const hours2 = date2.getHours();\n// const minutes2 = \"0\" + date2.getMinutes();\n// const seconds2 = \"0\" + date2.getSeconds();\n// //time for sunset\n// const formattedTime2 = hours2 + ':' + minutes2.substr(-2) + ':' + seconds2.substr(-2);\n\n// //to display time,day and time\n// const date = new Date();\n// const year = date.getFullYear();\n// const months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"];\n// const month = months[date.getMonth()];\n// const days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\n// const day = days[date.getDay()];\n// const num = date.getDate();\n// const string = day + \" \" +month+\" \" +num+\" \" + year;\n// console.log(string);\n\n// this.setState({\n//   cityname :myJson.name,\n//   country: myJson.sys.country,\n//   temperature: myJson.main.temp,\n//   humidity: myJson.main.humidity,\n//   Maxtemp: myJson.main.temp_max,\n//   Mintemp: myJson.main.temp.min,\n//   pressure: myJson.main.pressure,\n//   weather: myJson.weather[0].main,\n//   wind: myJson.wind.speed,\n//   sunrise: formattedTime1,\n//   sunset: formattedTime2,\n//   icon: myJson.weather[0].icon,\n//   loaded:true,\n//   time: string, \n//   error: \"\"\n// });\n// }\n// else {\n//   this.setState({\n//     cityname: undefined,\n//   country :undefined,\n//     temperature : undefined,\n//   pressure: undefined,\n//  Maxtemp:undefined,\n//  Mintemp: undefined,\n//  weather: undefined,\n//   humidity: undefined,\n//   wind: undefined,\n//   sunrise: undefined,\n//   sunset: undefined,\n//   icon: undefined,\n//   time: undefined,\n//   loading: false,\n//     error: \"Please enter the values.\"\n//   });\n// }\n//  }, 4000); \ngetWeather = async(e)=>{\n  this.state.check=true;\n  e.preventDefault();\nconst city = e.target.elements.city.value;\n \nconsole.log(city)\nconst response=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\nconsole.log(response);\nconst myJson=await response.json();\nconsole.log(myJson);\n\nif(city)\n{\n  //sunrise format\nconst date1 = new Date(myJson.sys.sunrise *1000);\nconst hours1 = date1.getHours();\nconst minutes1 = \"0\" + date1.getMinutes();\nconst seconds1 = \"0\" + date1.getSeconds();\n//time for sunrisse\nconst formattedTime1 = hours1 + ':' + minutes1.substr(-2) + ':' + seconds1.substr(-2);\n\n //sunset format\nconst date2 = new Date(myJson.sys.sunset *1000);\nconst hours2 = date2.getHours();\nconst minutes2 = \"0\" + date2.getMinutes();\nconst seconds2 = \"0\" + date2.getSeconds();\n//time for sunset\nconst formattedTime2 = hours2 + ':' + minutes2.substr(-2) + ':' + seconds2.substr(-2);\n\n//to display time,day and time\nconst date = new Date();\nconst year = date.getFullYear();\nconst months = [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sept\",\"Oct\",\"Nov\",\"Dec\"];\nconst month = months[date.getMonth()];\nconst days = [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"];\nconst day = days[date.getDay()];\nconst num = date.getDate();\nconst string = day + \" \" +month+\" \" +num+\" \" + year;\nconsole.log(string);\n\nthis.setState({\n  cityname :myJson.name,\n  country: myJson.sys.country,\n  temperature: myJson.main.temp,\n  humidity: myJson.main.humidity,\n  Maxtemp: myJson.main.temp_max,\n  Mintemp: myJson.main.temp.min,\n  pressure: myJson.main.pressure,\n  weather: myJson.weather[0].main,\n  wind: myJson.wind.speed,\n  sunrise: formattedTime1,\n  sunset: formattedTime2,\n  icon: myJson.weather[0].icon,\n  loading: false,\n  time: string, \n  error: \"\"\n});\n}\nelse {\n  this.setState({\n    cityname: undefined,\n  country :undefined,\n    temperature : undefined,\n  pressure: undefined,\n Maxtemp:undefined,\n Mintemp: undefined,\n weather: undefined,\n  humidity: undefined,\n  wind: undefined,\n  sunrise: undefined,\n  sunset: undefined,\n  icon: undefined,\n  time: undefined,\n  loading: false,\n    error: \"Please enter the values.\"\n  });\n}\n}\n\n\n  render() {\n    return (\n      <div><h3>\n      Weather App\n      </h3>\n  \n    <Form getWeather={this.getWeather}/>\n    \n   {this.state.loading && this.state.check?\n   <div>Loading....</div>:\n   <div id=\"information\">\n \n   <Weather\n  cityname = {this.state.cityname}\n  country = {this.state.country}\n  time = {this.state.time}\n  temperature = {this.state.temperature}\n  icon = {this.state.icon}\n  weather = {this.state.weather}\n  wind = {this.state.wind}\n  humidity = {this.state.humidity}\n  pressure = {this.state.pressure}\n  Maxtemp = {this.state.Maxtemp}\n  Mintemp = {this.state.Mintemp}\n  sunrise = {this.state.sunrise}\n  sunset = {this.state.sunset}\n  error = {this.state.error}\n  />\n  </div>}\n  \n   <br/><br/>\n   <div id = \"comments\">\n <Comment color='red' />\n </div>\n\n      </div>\n  \n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}