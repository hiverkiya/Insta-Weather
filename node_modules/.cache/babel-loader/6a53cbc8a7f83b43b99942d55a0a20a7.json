{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\weatherapp\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      temperature: undefined,\n      pressure: undefined,\n      Maxtemp: undefined,\n      Mintemp: undefined,\n      weather: undefined,\n      humidity: undefined,\n      wind: undefined,\n      sunrise: undefined,\n      sunset: undefined,\n      error: undefined\n    };\n\n    this.getWeather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value; //getElementById(\"comments\").style.display = 'default';\n\n      console.log(city);\n      const response = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n      console.log(response);\n      const myJson = await response.json();\n      console.log(myJson);\n      const date = new Date(myJson.sys.sunrise * 1000);\n      const hours = date.getHours(); // Minutes part from the timestamp\n\n      const minutes = \"0\" + date.getMinutes(); // Seconds part from the timestamp\n\n      const seconds = \"0\" + date.getSeconds(); // Will display time in 10:30:23 format\n\n      const formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n      console.log(formattedTime);\n      this.setState({\n        temperature: myJson.main.temp,\n        humidity: myJson.main.humidity,\n        Maxtemp: myJson.main.temp_max,\n        Mintemp: myJson.main.temp.min,\n        pressure: myJson.main.pressure,\n        weather: myJson.weather[0].main,\n        wind: myJson.wind.speed,\n        sunrise: myJson.sys.sunrise,\n        sunset: myJson.sys.sunset,\n        error: \"\"\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Weather App\"), React.createElement(Form, {\n      getWeather: this.getWeather,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"information\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Weather, {\n      temperature: this.state.temperature,\n      weather: this.state.weather,\n      wind: this.state.wind,\n      humidity: this.state.humidity,\n      pressure: this.state.pressure,\n      Maxtemp: this.state.Maxtemp,\n      Mintemp: this.state.Mintemp,\n      sunrise: this.state.sunrise,\n      sunset: this.state.sunset,\n      error: this.state.error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["C:/Users/Lenovo/Desktop/weatherapp/src/App.js"],"names":["React","Component","Form","Comment","Weather","API_KEY","App","state","temperature","undefined","pressure","Maxtemp","Mintemp","weather","humidity","wind","sunrise","sunset","error","getWeather","e","preventDefault","city","target","elements","value","console","log","response","fetch","myJson","json","date","Date","sys","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTime","substr","setState","main","temp","temp_max","min","speed","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './index.css';\nimport Form from \"./Form\";\nimport Comment from './Comment';\nimport Weather from \"./Weather\";\n\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\n\nclass App extends Component {\nstate = {\n  temperature : undefined,\n  pressure: undefined,\n Maxtemp:undefined,\n Mintemp: undefined,\n weather: undefined,\n  humidity: undefined,\n  wind: undefined,\n  sunrise: undefined,\n  sunset: undefined,\n  error: undefined\n}\ngetWeather = async(e)=>{\n  e.preventDefault();\nconst city = e.target.elements.city.value;\n  //getElementById(\"comments\").style.display = 'default';\nconsole.log(city)\nconst response=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\nconsole.log(response);\nconst myJson=await response.json();\nconsole.log(myJson);\nconst date = new Date(myJson.sys.sunrise *1000);\nconst hours = date.getHours();\n// Minutes part from the timestamp\nconst minutes = \"0\" + date.getMinutes();\n// Seconds part from the timestamp\nconst seconds = \"0\" + date.getSeconds();\n\n// Will display time in 10:30:23 format\nconst formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\nconsole.log(formattedTime);\nthis.setState({\n  temperature: myJson.main.temp,\n  humidity: myJson.main.humidity,\n  Maxtemp: myJson.main.temp_max,\n  Mintemp: myJson.main.temp.min,\n  pressure: myJson.main.pressure,\n  weather: myJson.weather[0].main,\n  wind: myJson.wind.speed,\n  sunrise: myJson.sys.sunrise,\n  sunset: myJson.sys.sunset,\n   error: \"\"\n});\n}\n\n\n  render() {\n    return (\n      <div><h3>\n      Weather App\n      </h3>\n    <Form getWeather={this.getWeather}/>\n<div id=\"information\">\n  <Weather\n\n  temperature = {this.state.temperature}\n  weather = {this.state.weather}\n  wind = {this.state.wind}\n  humidity = {this.state.humidity}\n  pressure = {this.state.pressure}\n  Maxtemp = {this.state.Maxtemp}\n  Mintemp = {this.state.Mintemp}\n  sunrise = {this.state.sunrise}\n  sunset = {this.state.sunset}\n  error = {this.state.error}\n  />\n</div>\n   <br/><br/>\n   <div id = \"comments\">\n <Comment color='red' />\n </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}