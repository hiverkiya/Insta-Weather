{"version":3,"sources":["Comment.js","App.js","serviceWorker.js","index.js"],"names":["Comment","handleChangeOfName","event","console","log","state","comment","setState","target","value","addComment","listOfComments","delete","filtered","filter","eachItem","this","map","eachElm","style","border","props","color","padding","onClick","type","onChange","placeholder","Component","API_KEY","App","setName","cityname","checkWeather","e","a","async","preventDefault","fetch","response","json","myJson","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAiEeA,E,YA3Db,aAAe,IAAD,8BACZ,+CAQFC,mBAAqB,SAAAC,GACnBC,QAAQC,IAAI,EAAKC,MAAMC,SACvB,EAAKC,SAAS,CACZD,QAASJ,EAAMM,OAAOC,SAZZ,EAedC,WAAa,SAAAR,GACX,EAAKK,SAAS,CACZI,eAAe,GAAD,mBAAM,EAAKN,MAAMM,gBAAjB,CAAiC,EAAKN,MAAMC,UAC1DA,QAAS,MAlBC,EAqBdM,OAAS,SAACH,GACR,IAAII,EAAW,EAAKR,MAAMM,eAAeG,QAAO,SAACC,GAC/C,OAAOA,IAAaN,KAGtB,EAAKF,SAAS,CACZI,eAAgBE,KAzBlBV,QAAQC,IAAI,wBACZ,EAAKC,MAAQ,CACXC,QAAS,GACTK,eAAgB,IALN,E,iFA+BRR,QAAQC,IAAI,gC,+BAGR,IAAD,OAGP,OAFID,QAAQC,IAAI,mBAGd,6BAGJY,KAAKX,MAAMM,eAAeM,KAAI,SAAAC,GAAO,OACrC,uBAAGC,MAAO,CAACC,OAAO,aAAD,OAAe,EAAKC,MAAMC,OAASC,QAAS,QAASL,EACtE,4BAAQM,QAAS,kBAAM,EAAKZ,OAAOM,KAAnC,gBAGQ,8BACAO,KAAK,OACLC,SAAU,SAAAxB,GAAK,OAAI,EAAKD,mBAAmBC,IAC3CO,MAAOO,KAAKX,MAAMC,QAClBqB,YAAY,0BACZ,6BAAK,6BACP,4BAAQH,QAASR,KAAKN,YAAtB,kB,GArDckB,aCDhBC,EAAU,mCAgDDC,E,YA9Cb,aAAe,IAAD,8BACZ,+CAMJC,QAAQ,SAAC7B,GACPC,QAAQC,IAAI,EAAKC,MAAM2B,UACvB,EAAKzB,SAAS,CACZyB,SAAS9B,EAAMM,OAAOC,SAVV,EAahBwB,aAAe,SAAMC,GAAN,iBAAAC,EAAAC,OAAA,uDACbF,EAAEG,iBAEJlC,QAAQC,IAAI,EAAKC,MAAM2B,UAHR,WAAAG,EAAA,MAIMG,MAAM,6CAAD,OAA8C,EAAKjC,MAAM2B,SAAzD,mBAA4EH,EAA5E,mBAJX,cAITU,EAJS,OAKfpC,QAAQC,IAAImC,GALG,WAAAJ,EAAA,MAMII,EAASC,QANb,OAMTC,EANS,OAOftC,QAAQC,IAAIqC,GAPG,uCAXX,EAAKpC,MAAQ,CACX2B,SAAU,IAHA,E,sEA4BJ,IAAD,OACP,OACE,6BAAK,2CAIN,2BAAOL,YAAa,qBAAoBD,SAAU,kBAAI,EAAKK,SAAQtB,MAAOO,KAAKX,MAAM2B,WACvF,4BAAQU,GAAI,SAASlB,QAASR,KAAKiB,cAAnC,UAEA,6BAAK,6BACL,yBAAKS,GAAK,YACZ,kBAAC,EAAD,CAASpB,MAAM,c,GAxCEM,aCOEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a4c2a854.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nimport './index.css';\r\n\r\nclass Comment extends Component {\r\n  constructor() {\r\n    super();\r\n    console.log(\"Hi, I am constructor\");\r\n    this.state = {\r\n      comment: '',\r\n      listOfComments: []\r\n\r\n    };\r\n  }\r\n  handleChangeOfName = event => {\r\n    console.log(this.state.comment);\r\n    this.setState({\r\n      comment: event.target.value,\r\n    });\r\n  };\r\n  addComment = event => {\r\n    this.setState({\r\n      listOfComments: [...this.state.listOfComments, this.state.comment],\r\n      comment: \"\"\r\n    })\r\n  }\r\n  delete = (value) =>{\r\n    let filtered = this.state.listOfComments.filter((eachItem) => {\r\n      return eachItem !== value\r\n    }\r\n    )\r\n    this.setState({\r\n      listOfComments: filtered\r\n    })\r\n  }\r\n  componentDidMount(){\r\n        console.log(\"Hi, I am ComponentDidMount\");\r\n\r\n  }\r\n  render() {\r\n        console.log(\"Hi, I am render\");\r\n\r\n    return (\r\n      <div>\r\n       \r\n        {\r\n  this.state.listOfComments.map(eachElm => (\r\n  <p style={{border: `2px solid ${this.props.color}`, padding: '5px'}}>{eachElm} \r\n  <button onClick={() => this.delete(eachElm)}> Delete </button></p>\r\n  ))\r\n}\r\n          <textarea\r\n          type=\"text\"\r\n          onChange={event => this.handleChangeOfName(event)}\r\n          value={this.state.comment}\r\n          placeholder=\"Enter comment here...\"\r\n        /><br/><br/>\r\n        <button onClick={this.addComment}> Comment </button>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment","import React, { Component } from 'react';\nimport './index.css';\nimport Comment from './Comment';\n\nconst API_KEY = \"723d42961499c3de4b2beb522291d9cd\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cityname: ''\n    };\n  }\n\nsetName=(event)=>{\n  console.log(this.state.cityname)\n  this.setState({\n    cityname:event.target.value\n  })\n}\ncheckWeather = async(e)=>{\n  e.preventDefault();\n  //getElementById(\"comments\").style.display = 'default';\nconsole.log(this.state.cityname)\nconst response=await fetch(`api.openweathermap.org/data/2.5/weather?q=${this.state.cityname},&appid=${API_KEY}&units=metric`);\nconsole.log(response);\nconst myJson=await response.json();\nconsole.log(myJson);\n// this.setState({\n//   gender:myJson.gender\n// })\n\n}\n\n\n  render() {\n    return (\n      <div><h3>\n      Weather App\n      </h3>\n     \n     <input placeholder =\"Enter City Name...\"onChange={()=>this.setName}value={this.state.cityname}/>\n   <button id =\"search\" onClick={this.checkWeather}>Search</button>\n\n   <br/><br/>\n   <div id = \"comments\">\n <Comment color='red' />\n </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}